IAM policy for lamda function:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "arn:aws:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:Start*",
        "ec2:Stop*"
      ],
      "Resource": "*"
    }
  ]
}







Stops the EC2 instances:

import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.stop_instances(InstanceIds=instances)
    print('stopped your instances: ' + str(instances))

Starts the EC2 instances:
 
import boto3
region = 'ap-south-1'
instances = ['i-12345', 'i-2345']
ec2 = boto3.client('ec2', region_name=region)

def lambda_handler(event, context):
    ec2.start_instances(InstanceIds=instances)
    print('started your instances: ' + str(instances))



=============================================================

Automated EBS Snapshots using AWS Lambda & CloudWatch



Paste the JSON below for the policy:

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:*"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        },
        {
            "Effect": "Allow",
            "Action": "ec2:Describe*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateSnapshot",
                "ec2:DeleteSnapshot",
                "ec2:CreateTags",
                "ec2:ModifySnapshotAttribute",
                "ec2:ResetSnapshotAttribute"
            ],
            "Resource": [
                "*"
            ]
        }
    ]
}





Paste the code below into the code pane:




# Backup all in-use volumes in all regions

import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # Get list of regions
    regions = ec2.describe_regions().get('Regions',[] )

    # Iterate over regions
    for region in regions:
        print "Checking region %s " % region['RegionName']
        reg=region['RegionName']

        # Connect to region
        ec2 = boto3.client('ec2', region_name=reg)
    
        # Get all in-use volumes in all regions  
        result = ec2.describe_volumes( Filters=[{'Name': 'status', 'Values': ['in-use']}])
        
        for volume in result['Volumes']:
            print "Backing up %s in %s" % (volume['VolumeId'], volume['AvailabilityZone'])
        
            # Create snapshot
            result = ec2.create_snapshot(VolumeId=volume['VolumeId'],Description='Created by Lambda backup function ebs-snapshots')
        
            # Get snapshot resource 
            ec2resource = boto3.resource('ec2', region_name=reg)
            snapshot = ec2resource.Snapshot(result['SnapshotId'])
        
            volumename = 'N/A'
        
            # Find name tag for volume if it exists
            if 'Tags' in volume:
                for tags in volume['Tags']:
                    if tags["Key"] == 'Name':
                        volumename = tags["Value"]
        
            # Add volume name to snapshot for easier identification
            snapshot.create_tags(Tags=[{'Key': 'Name','Value': volumename}])


Reference URL: https://hireamir.com/blog/automated-ebs-snapshots-using-aws-lambda-cloudwatch


============================================================================================================

######### Schedule Trigger using EventBridge ##########################

cron(fields) 

Field 	        Values 	          Wildcards 
------          -------           ----------
Minutes 	      0-59 	            , - * / 
Hours 	        0-23 	            , - * / 
Day-of-month   	1-31 	            , - * ? / L W 
Month 	        1-12 or JAN-DEC   , - * / 
Day-of-week 	  1-7 or SUN-SAT 	  , - * ? L # 
Year 	          1970-2199 	      , - * / 


The , (comma) wildcard includes additional values. In the Month field, JAN,FEB,MAR would include January, February, and March. 
The - (dash) wildcard specifies ranges. In the Day field, 1-15 would include days 1 through 15 of the specified month. 
The * (asterisk) wildcard includes all values in the field. In the Hours field, * would include every hour. You cannot use * in both the Day-of-month and Day-of-week fields. If you use it in one, you must use ? in the other. 
The / (forward slash) wildcard specifies increments. In the Minutes field, you could enter 1/10 to specify every tenth minute, starting from the first minute of the hour (for example, the 11th, 21st, and 31st minute, and so on). 
The ? (question mark) wildcard specifies one or another. In the Day-of-month field you could enter 7 and if you didn't care what day of the week the 7th was, you could enter ? in the Day-of-week field. 
The L wildcard in the Day-of-month or Day-of-week fields specifies the last day of the month or week. 
The W wildcard in the Day-of-month field specifies a weekday. In the Day-of-month field, 3W specifies the weekday closest to the third day of the month. 
The # wildcard in the Day-of-week field specifies a certain instance of the specified day of the week within a month. For example, 3#2 would be the second Tuesday of the month: the 3 refers to Tuesday because it is the third day of each week, and the 2 refers to the second day of that type within the month. 
Examples 

cron(0,10,*,*,?,*)          - Run at 10:00 am (UTC) every day                      
              
cron(0/10,*,?,*,MON-FRI,*)  - Run every 10 minutes Monday through Friday      

cron(0,8,1,*,?,*)           - Run at 8:00 am (UTC) every 1st day of the month 


#################################################################################################################################################

Rate Expressions 

The syntax for rate expressions is much easier than for cron expressions. They have just two required fields separated by white space. 

Syntax is:-

rate(value unit)

Where value is a positive number and unit is a unit of time. The valid values for unit are:- minute | minutes | hour | hours | day | days 

Restrictions 

If the value is equal to 1, then the unit must be singular. Similarly, for values greater than 1, the unit must be plural. For example, rate(1 hours) and rate(5 hour) are not valid, but rate(1 hour) and rate(5 hours) are valid. 

Examples 

The following examples show some rate expressions. A rate expression starts when you create the scheduled event rule, and then runs on its defined schedule from then on. 

rate(1 minute)     - run every minute

rate(1 hour)       - run every hour











